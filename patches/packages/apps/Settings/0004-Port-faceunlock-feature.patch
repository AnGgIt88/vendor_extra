From 3dfc0766235b15b9bd16293848efd87dd6a792a7 Mon Sep 17 00:00:00 2001
From: jhenrique09 <jhenrique09.mcz@hotmail.com>
Date: Sun, 7 Feb 2021 21:14:30 -0300
Subject: [PATCH 4/7] Port faceunlock feature

From motorola/nio_retcn/nio:11/RRN31.Q1-20-17-1/1cbc0:user/release-keys

Change-Id: I686b5128405426274b4176d9c09192a6790c82f9
---
 Android.bp                                    |   1 +
 AndroidManifest.xml                           |   4 +
 res/layout/face_enroll_button.xml             |  31 ----
 res/layout/face_remove_button.xml             |  31 ----
 res/values/cm_strings.xml                     |   9 ++
 res/xml/security_settings_face.xml            |  45 +++---
 .../BiometricEnrollIntroduction.java          |   2 +-
 .../face/FaceEnrollIntroduction.java          |  55 ++++++++
 ...FaceProfileStatusPreferenceController.java |   5 +
 .../biometrics/face/FaceSettings.java         |  18 +++
 .../FaceSettingsAppPreferenceController.java  |   6 +
 ...SettingsAttentionPreferenceController.java |   4 +-
 ...ceSettingsConfirmPreferenceController.java |   4 +-
 ...tingsEnrollButtonPreferenceController.java |  13 +-
 ...aceSettingsFooterPreferenceController.java |  14 +-
 ...eSettingsKeyguardPreferenceController.java |   4 +-
 ...sLockscreenBypassPreferenceController.java |   6 +-
 ...aceSettingsManagePreferenceController.java |  25 ++++
 ...tingsRemoveButtonPreferenceController.java |  46 +++---
 .../face/FaceStatusPreferenceController.java  |  17 +++
 .../settings/custom/biometrics/FaceUtils.java |  31 ++++
 .../biometrics/face/FaceEnrollActivity.java   |  29 ++++
 .../FaceSettingsRedoPreferenceController.java | 132 ++++++++++++++++++
 .../contextualcards/FaceReEnrollDialog.java   |   7 +-
 ...evelSecurityEntryPreferenceController.java |   8 +-
 25 files changed, 419 insertions(+), 128 deletions(-)
 delete mode 100644 res/layout/face_enroll_button.xml
 delete mode 100644 res/layout/face_remove_button.xml
 create mode 100644 src/com/android/settings/biometrics/face/FaceSettingsManagePreferenceController.java
 create mode 100644 src/com/android/settings/custom/biometrics/FaceUtils.java
 create mode 100644 src/com/android/settings/custom/biometrics/face/FaceEnrollActivity.java
 create mode 100644 src/com/android/settings/custom/biometrics/face/FaceSettingsRedoPreferenceController.java

diff --git a/Android.bp b/Android.bp
index aac82c695a..b99b164015 100644
--- a/Android.bp
+++ b/Android.bp
@@ -57,6 +57,7 @@ android_library {
         "android.hardware.dumpstate-V1.1-java",
         "org.lineageos.platform.internal",
         "vendor.lineage.fastcharge-V1.0-java",
+        "faceunlock_framework",
     ],
 
     libs: [
diff --git a/AndroidManifest.xml b/AndroidManifest.xml
index 6ead75a878..35f6366d4b 100644
--- a/AndroidManifest.xml
+++ b/AndroidManifest.xml
@@ -107,6 +107,10 @@
     <uses-permission android:name="android.permission.READ_DREAM_STATE" />
     <uses-permission android:name="android.permission.READ_DREAM_SUPPRESSION" />
 
+    <!-- Face Unlock -->
+    <uses-permission android:name="com.android.settings.FACE_UNLOCK"/>
+    <permission android:name="com.android.settings.FACE_UNLOCK" android:protectionLevel="signatureOrSystem"/>
+
     <application android:label="@string/settings_label"
             android:icon="@mipmap/ic_launcher"
             android:theme="@style/Theme.Settings"
diff --git a/res/layout/face_enroll_button.xml b/res/layout/face_enroll_button.xml
deleted file mode 100644
index f40c42c4bf..0000000000
--- a/res/layout/face_enroll_button.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-  ~ Copyright (C) 2019 The Android Open Source Project
-  ~
-  ~ Licensed under the Apache License, Version 2.0 (the "License");
-  ~ you may not use this file except in compliance with the License.
-  ~ You may obtain a copy of the License at
-  ~
-  ~      http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~ Unless required by applicable law or agreed to in writing, software
-  ~ distributed under the License is distributed on an "AS IS" BASIS,
-  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~ See the License for the specific language governing permissions and
-  ~ limitations under the License
-  -->
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:minHeight="?android:attr/listPreferredItemHeight">
-
-    <Button
-        android:id="@+id/security_settings_face_settings_enroll_button"
-        android:layout_marginStart="@dimen/screen_margin_sides"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_gravity="start"
-        android:text="@string/security_settings_face_settings_enroll"/>
-
-</LinearLayout>
\ No newline at end of file
diff --git a/res/layout/face_remove_button.xml b/res/layout/face_remove_button.xml
deleted file mode 100644
index 98459f0942..0000000000
--- a/res/layout/face_remove_button.xml
+++ /dev/null
@@ -1,31 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-  ~ Copyright (C) 2018 The Android Open Source Project
-  ~
-  ~ Licensed under the Apache License, Version 2.0 (the "License");
-  ~ you may not use this file except in compliance with the License.
-  ~ You may obtain a copy of the License at
-  ~
-  ~      http://www.apache.org/licenses/LICENSE-2.0
-  ~
-  ~ Unless required by applicable law or agreed to in writing, software
-  ~ distributed under the License is distributed on an "AS IS" BASIS,
-  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-  ~ See the License for the specific language governing permissions and
-  ~ limitations under the License.
-  -->
-<LinearLayout
-    xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="match_parent"
-    android:layout_height="wrap_content"
-    android:minHeight="?android:attr/listPreferredItemHeight">
-
-    <Button
-        android:id="@+id/security_settings_face_settings_remove_button"
-        android:layout_marginStart="@dimen/screen_margin_sides"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_gravity="start"
-        android:text="@string/security_settings_face_settings_remove_face_data"/>
-
-</LinearLayout>
\ No newline at end of file
diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
index d1200582f1..e0c4b617d6 100644
--- a/res/values/cm_strings.xml
+++ b/res/values/cm_strings.xml
@@ -170,4 +170,13 @@
     <!-- Lockscreen battery info indicator  -->
     <string name="lockscreen_battery_info_title">Lockscreen charging info</string>
     <string name="lockscreen_battery_info_summary">Display negociated charger max current and voltage and battery temperature on lockscreen while charging</string>
+
+    <!-- Face Unlock -->
+    <string name="security_settings_face_settings_footer_custom">Face unlock lets you unlock your device by looking at it. Keep in mind:\n\n● Your device may unlock any time you look at it.\n● Your device can be unlocked by someone else if they hold it in front of your face while your eyes are open.\n● Your device may also be unlocked by someone who looks a lot like you, such as a child or identical sibling.</string>
+    <string name="security_settings_face_settings_remove_dialog_details_custom">Data recorded by face unlock will be permanently and securely deleted. After removal, you will need your PIN, pattern, or password to unlock your phone.</string>
+    <string name="security_settings_face_unlock_redo_face_scan_summary">Remove existing face scan and create a new scan</string>
+    <string name="security_settings_face_unlock_redo_face_scan_title">Redo face scan</string>
+    <string name="security_dashboard_summary_face_and_fingerprint">Screen lock, fingerprint, face unlock</string>
+    <string name="face_redo_confirm_btn">Redo</string>
+    <string name="face_redo_warning_msg">Do you want to remove the existing face scan and create a new one?</string>
 </resources>
diff --git a/res/xml/security_settings_face.xml b/res/xml/security_settings_face.xml
index d450fef4de..2721278c7c 100644
--- a/res/xml/security_settings_face.xml
+++ b/res/xml/security_settings_face.xml
@@ -27,29 +27,50 @@
         app:controller="com.android.settings.widget.VideoPreferenceController"/>
 
     <PreferenceCategory
-        android:key="security_settings_face_unlock_category"
-        android:title="@string/security_settings_face_settings_use_face_category">
+        android:key="security_settings_face_button_category"
+        android:title="@string/security_settings_face_preference_title">
+
         <com.android.settingslib.RestrictedSwitchPreference
             android:key="security_settings_face_keyguard"
             android:title="@string/security_settings_face_settings_use_face_unlock_phone"
             app:keywords="@string/keywords_face_unlock"
             app:controller="com.android.settings.biometrics.face.FaceSettingsKeyguardPreferenceController"/>
+
         <SwitchPreference
             android:key="security_settings_face_app"
             android:title="@string/security_settings_face_settings_use_face_for_apps"
             app:keywords="@string/keywords_face_unlock"
             app:controller="com.android.settings.biometrics.face.FaceSettingsAppPreferenceController"/>
+
         <com.android.settingslib.RestrictedSwitchPreference
             android:key="security_lockscreen_bypass"
             android:title="@string/lockscreen_bypass_title"
             android:summary="@string/lockscreen_bypass_summary"
             settings:keywords="@string/keywords_lockscreen_bypass"
             settings:controller="com.android.settings.biometrics.face.FaceSettingsLockscreenBypassPreferenceController" />
+
+        <Preference
+            android:title="@string/security_settings_face_unlock_redo_face_scan_title"
+            android:key="security_settings_face_redo_face_scan"
+            android:summary="@string/security_settings_face_unlock_redo_face_scan_summary"
+            app:controller="com.android.settings.custom.biometrics.face.FaceSettingsRedoPreferenceController"
+            app:keywords="@string/keywords_face_unlock"/>
+
+        <Preference
+            android:title="@string/security_settings_face_settings_remove_face_data"
+            android:key="security_settings_face_delete_faces_container"
+            app:keywords="@string/keywords_face_unlock"/>
+
+        <Preference
+            android:title="@string/security_settings_face_settings_enroll"
+            android:key="security_settings_face_enroll_faces_container"
+            app:keywords="@string/keywords_face_unlock"/>
     </PreferenceCategory>
 
     <PreferenceCategory
         android:key="security_settings_face_manage_category"
-        android:title="@string/security_settings_face_settings_require_category">
+        android:title="@string/security_settings_face_settings_require_category"
+        app:controller="com.android.settings.biometrics.face.FaceSettingsManagePreferenceController">
         <SwitchPreference
             android:key="security_settings_face_require_attention"
             android:title="@string/security_settings_face_settings_require_attention"
@@ -65,24 +86,6 @@
             app:controller="com.android.settings.biometrics.face.FaceSettingsConfirmPreferenceController"/>
     </PreferenceCategory>
 
-    <PreferenceCategory
-        android:key="security_settings_face_button_category"
-        android:title="@string/security_settings_face_preference_title">
-        <com.android.settingslib.widget.LayoutPreference
-            android:key="security_settings_face_delete_faces_container"
-            android:title="@string/security_settings_face_settings_remove_face_data"
-            android:selectable="false"
-            android:layout="@layout/face_remove_button"
-            settings:allowDividerBelow="true"/>
-
-        <com.android.settingslib.widget.LayoutPreference
-            android:key="security_settings_face_enroll_faces_container"
-            android:title="@string/security_settings_face_settings_enroll"
-            android:selectable="false"
-            android:layout="@layout/face_enroll_button"
-            settings:allowDividerBelow="true"/>
-    </PreferenceCategory>
-
     <com.android.settingslib.widget.FooterPreference
         settings:allowDividerAbove="true"/>
 </PreferenceScreen>
diff --git a/src/com/android/settings/biometrics/BiometricEnrollIntroduction.java b/src/com/android/settings/biometrics/BiometricEnrollIntroduction.java
index d815f57a7e..cb538932fb 100644
--- a/src/com/android/settings/biometrics/BiometricEnrollIntroduction.java
+++ b/src/com/android/settings/biometrics/BiometricEnrollIntroduction.java
@@ -44,7 +44,7 @@ public abstract class BiometricEnrollIntroduction extends BiometricEnrollBase
         implements LinkSpan.OnClickListener {
 
     private UserManager mUserManager;
-    private boolean mHasPassword;
+    protected boolean mHasPassword;
     private boolean mBiometricUnlockDisabledByAdmin;
     private TextView mErrorText;
     protected boolean mConfirmingCredentials;
diff --git a/src/com/android/settings/biometrics/face/FaceEnrollIntroduction.java b/src/com/android/settings/biometrics/face/FaceEnrollIntroduction.java
index f876bb4116..17856baa51 100644
--- a/src/com/android/settings/biometrics/face/FaceEnrollIntroduction.java
+++ b/src/com/android/settings/biometrics/face/FaceEnrollIntroduction.java
@@ -18,6 +18,7 @@ package com.android.settings.biometrics.face;
 
 import android.app.admin.DevicePolicyManager;
 import android.app.settings.SettingsEnums;
+import android.content.ComponentName;
 import android.content.Intent;
 import android.hardware.face.FaceManager;
 import android.os.Bundle;
@@ -36,17 +37,21 @@ import com.google.android.setupcompat.util.WizardManagerHelper;
 import com.google.android.setupdesign.span.LinkSpan;
 import com.google.android.setupdesign.template.RequireScrollMixin;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 public class FaceEnrollIntroduction extends BiometricEnrollIntroduction {
 
     private static final String TAG = "FaceIntro";
 
     private FaceManager mFaceManager;
     private FaceFeatureProvider mFaceFeatureProvider;
+    private boolean mForRedo;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
+        mForRedo = getIntent().getBooleanExtra("for_redo", false);
         mFaceManager = Utils.getFaceManagerOrNull(this);
         mFaceFeatureProvider = FeatureFactory.getFactory(getApplicationContext())
                 .getFaceFeatureProvider();
@@ -97,6 +102,9 @@ public class FaceEnrollIntroduction extends BiometricEnrollIntroduction {
                         ? R.string.aosp_security_settings_face_enroll_introduction_footer_part_2
                         : R.string.security_settings_face_settings_footer_attention_not_supported;
         footer2.setText(footer2TextResource);
+        if (FaceUtils.isFaceUnlockSupported() && mHasPassword && mToken != null) {
+            openCustomFaceUnlockPackage();
+        }
     }
 
     @Override
@@ -205,4 +213,51 @@ public class FaceEnrollIntroduction extends BiometricEnrollIntroduction {
     public void onClick(LinkSpan span) {
         // TODO(b/110906762)
     }
+
+    @Override
+    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
+        super.onActivityResult(requestCode, resultCode, data);
+        if (!FaceUtils.isFaceUnlockSupported()) {
+            return;
+        }
+        if (requestCode != CHOOSE_LOCK_GENERIC_REQUEST) {
+            if (requestCode != CONFIRM_REQUEST) {
+                if (requestCode == ENROLL_REQUEST) {
+                    if (resultCode == RESULT_FIRST_USER || resultCode == RESULT_OK) {
+                        setResult(RESULT_FIRST_USER);
+                        finish();
+                        return;
+                    }
+                    setResult(RESULT_CANCELED);
+                    finish();
+                }
+            } else if (resultCode == RESULT_OK && data != null) {
+                openCustomFaceUnlockPackage();
+            }
+        } else if (resultCode == RESULT_FIRST_USER) {
+            openCustomFaceUnlockPackage();
+        }
+    }
+
+    private void openCustomFaceUnlockPackage() {
+        ComponentName componentName;
+        Intent intent = new Intent();
+        intent.putExtra(ChooseLockSettingsHelper.EXTRA_KEY_CHALLENGE_TOKEN, mToken);
+        if (mUserId != -10000) {
+            intent.putExtra("android.intent.extra.USER_ID", mUserId);
+        }
+        if (mForRedo) {
+            componentName = new ComponentName(
+                "org.pixelexperience.faceunlock",
+                "org.pixelexperience.faceunlock.FaceEnrollActivity");
+        } else {
+            componentName = new ComponentName(
+                "org.pixelexperience.faceunlock",
+                "org.pixelexperience.faceunlock.SetupFaceIntroActivity");
+        }
+        intent.setComponent(componentName);
+        if (intent.resolveActivity(getPackageManager()) != null) {
+            startActivityForResult(intent, ENROLL_REQUEST);
+        }
+    }
 }
diff --git a/src/com/android/settings/biometrics/face/FaceProfileStatusPreferenceController.java b/src/com/android/settings/biometrics/face/FaceProfileStatusPreferenceController.java
index 56b325bdf8..a0b719d52b 100644
--- a/src/com/android/settings/biometrics/face/FaceProfileStatusPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceProfileStatusPreferenceController.java
@@ -23,6 +23,8 @@ import com.android.settings.R;
 
 import androidx.preference.Preference;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 public class FaceProfileStatusPreferenceController extends FaceStatusPreferenceController {
 
     private static final String KEY_FACE_SETTINGS = "face_settings_profile";
@@ -33,6 +35,9 @@ public class FaceProfileStatusPreferenceController extends FaceStatusPreferenceC
 
     @Override
     public int getAvailabilityStatus() {
+        if (FaceUtils.isFaceUnlockSupported()) {
+            return UNSUPPORTED_ON_DEVICE;
+        }
         // Check if Face for Profile is available.
         final int isAvailable = super.getAvailabilityStatus();
         if (isAvailable != AVAILABLE) {
diff --git a/src/com/android/settings/biometrics/face/FaceSettings.java b/src/com/android/settings/biometrics/face/FaceSettings.java
index 04df11a17b..1f6d785ef6 100644
--- a/src/com/android/settings/biometrics/face/FaceSettings.java
+++ b/src/com/android/settings/biometrics/face/FaceSettings.java
@@ -49,6 +49,9 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+import com.android.settings.custom.biometrics.face.FaceSettingsRedoPreferenceController;
+
 /**
  * Settings screen for face authentication.
  */
@@ -71,6 +74,7 @@ public class FaceSettings extends DashboardFragment {
     private FaceSettingsRemoveButtonPreferenceController mRemoveController;
     private FaceSettingsEnrollButtonPreferenceController mEnrollController;
     private FaceSettingsLockscreenBypassPreferenceController mLockscreenController;
+    private FaceSettingsRedoPreferenceController mRedoController;
     private List<AbstractPreferenceController> mControllers;
 
     private List<Preference> mTogglePreferences;
@@ -81,6 +85,12 @@ public class FaceSettings extends DashboardFragment {
     private boolean mConfirmingPassword;
 
     private final FaceSettingsRemoveButtonPreferenceController.Listener mRemovalListener = () -> {
+        if (FaceUtils.isFaceUnlockSupported()){
+            if (getActivity() != null) {
+                getActivity().finish();
+            }
+            return;
+        }
 
         // Disable the toggles until the user re-enrolls
         for (Preference preference : mTogglePreferences) {
@@ -178,6 +188,10 @@ public class FaceSettings extends DashboardFragment {
         }
         mRemoveController.setUserId(mUserId);
 
+        if (mRedoController != null) {
+            mRedoController.setUserId(mUserId);
+        }
+
         // Don't show keyguard controller for work profile settings.
         if (mUserManager.isManagedProfile(mUserId)) {
             removePreference(FaceSettingsKeyguardPreferenceController.KEY);
@@ -300,6 +314,9 @@ public class FaceSettings extends DashboardFragment {
                 mEnrollController = (FaceSettingsEnrollButtonPreferenceController) controller;
                 mEnrollController.setListener(mEnrollListener);
                 mEnrollController.setActivity((SettingsActivity) getActivity());
+            } else if (controller instanceof FaceSettingsRedoPreferenceController) {
+                mRedoController = (FaceSettingsRedoPreferenceController) controller;
+                mRedoController.setActivity((SettingsActivity) getActivity());
             }
         }
 
@@ -316,6 +333,7 @@ public class FaceSettings extends DashboardFragment {
         controllers.add(new FaceSettingsFooterPreferenceController(context));
         controllers.add(new FaceSettingsConfirmPreferenceController(context));
         controllers.add(new FaceSettingsEnrollButtonPreferenceController(context));
+        controllers.add(new FaceSettingsRedoPreferenceController(context));
         return controllers;
     }
 
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsAppPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsAppPreferenceController.java
index bde146b19c..1d8325c70e 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsAppPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsAppPreferenceController.java
@@ -26,6 +26,8 @@ import androidx.preference.Preference;
 
 import com.android.settings.Utils;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 /**
  * Preference controller for Face settings page controlling the ability to use
  * Face authentication in apps (through BiometricPrompt).
@@ -78,6 +80,10 @@ public class FaceSettingsAppPreferenceController extends FaceSettingsPreferenceC
 
     @Override
     public int getAvailabilityStatus() {
+        if (FaceUtils.isFaceUnlockSupported()){
+            return UNSUPPORTED_ON_DEVICE;
+        }
+
         if(mFaceManager == null){
             return AVAILABLE_UNSEARCHABLE;
         }
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsAttentionPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsAttentionPreferenceController.java
index 200c0b949e..eb6291e974 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsAttentionPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsAttentionPreferenceController.java
@@ -27,6 +27,8 @@ import androidx.preference.SwitchPreference;
 
 import com.android.settings.Utils;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 /**
  * Preference controller that manages the ability to use face authentication with/without
  * user attention. See {@link FaceManager#setRequireAttention(boolean, byte[])}.
@@ -123,6 +125,6 @@ public class FaceSettingsAttentionPreferenceController extends FaceSettingsPrefe
 
     @Override
     public int getAvailabilityStatus() {
-        return AVAILABLE;
+        return FaceUtils.isFaceUnlockSupported() ? UNSUPPORTED_ON_DEVICE : AVAILABLE;
     }
 }
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsConfirmPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsConfirmPreferenceController.java
index c515742113..da2594c60f 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsConfirmPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsConfirmPreferenceController.java
@@ -26,6 +26,8 @@ import androidx.preference.Preference;
 
 import com.android.settings.Utils;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 /**
  * Preference controller giving the user an option to always require confirmation.
  */
@@ -75,6 +77,6 @@ public class FaceSettingsConfirmPreferenceController extends FaceSettingsPrefere
 
     @Override
     public int getAvailabilityStatus() {
-        return AVAILABLE;
+        return FaceUtils.isFaceUnlockSupported() ? UNSUPPORTED_ON_DEVICE : AVAILABLE;
     }
 }
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsEnrollButtonPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsEnrollButtonPreferenceController.java
index e89eca4fc2..9cc90ec842 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsEnrollButtonPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsEnrollButtonPreferenceController.java
@@ -18,8 +18,6 @@ package com.android.settings.biometrics.face;
 
 import android.content.Context;
 import android.content.Intent;
-import android.view.View;
-import android.widget.Button;
 
 import androidx.preference.Preference;
 
@@ -33,7 +31,7 @@ import com.android.settingslib.widget.LayoutPreference;
  * Preference controller that allows a user to enroll their face.
  */
 public class FaceSettingsEnrollButtonPreferenceController extends BasePreferenceController
-        implements View.OnClickListener {
+        implements Preference.OnPreferenceClickListener {
 
     private static final String TAG = "FaceSettings/Remove";
     static final String KEY = "security_settings_face_enroll_faces_container";
@@ -41,7 +39,6 @@ public class FaceSettingsEnrollButtonPreferenceController extends BasePreference
     private int mUserId;
     private byte[] mToken;
     private SettingsActivity mActivity;
-    private Button mButton;
     private boolean mIsClicked;
     private Listener mListener;
 
@@ -57,14 +54,11 @@ public class FaceSettingsEnrollButtonPreferenceController extends BasePreference
     @Override
     public void updateState(Preference preference) {
         super.updateState(preference);
-
-        mButton = ((LayoutPreference) preference)
-                .findViewById(R.id.security_settings_face_settings_enroll_button);
-        mButton.setOnClickListener(this);
+        preference.setOnPreferenceClickListener(this);
     }
 
     @Override
-    public void onClick(View v) {
+    public boolean onPreferenceClick(Preference preference) {
         mIsClicked = true;
         final Intent intent = new Intent();
         intent.setClassName("com.android.settings", FaceEnrollIntroduction.class.getName());
@@ -75,6 +69,7 @@ public class FaceSettingsEnrollButtonPreferenceController extends BasePreference
         } else {
             mContext.startActivity(intent);
         }
+        return true;
     }
 
     @Override
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsFooterPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsFooterPreferenceController.java
index c66546790e..57b56e7f0d 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsFooterPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsFooterPreferenceController.java
@@ -28,6 +28,8 @@ import com.android.settings.utils.AnnotationSpan;
 import com.android.settingslib.HelpUtils;
 import com.android.settingslib.widget.FooterPreference;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 /**
  * Footer for face settings showing the help text and help link.
  */
@@ -60,10 +62,14 @@ public class FaceSettingsFooterPreferenceController extends BasePreferenceContro
         final AnnotationSpan.LinkInfo linkInfo =
                 new AnnotationSpan.LinkInfo(mContext, ANNOTATION_URL, helpIntent);
 
-        final int footerRes = mProvider.isAttentionSupported(mContext)
-                ? R.string.security_settings_face_settings_footer
-                : R.string.security_settings_face_settings_footer_attention_not_supported;
-
+        final int footerRes;
+        if (FaceUtils.isFaceUnlockSupported()) {
+            footerRes = R.string.security_settings_face_settings_footer_custom;
+        } else if (mProvider.isAttentionSupported(mContext)) {
+            footerRes = R.string.security_settings_face_settings_footer;
+        } else {
+            footerRes = R.string.security_settings_face_settings_footer_attention_not_supported;
+        }
         preference.setTitle(AnnotationSpan.linkify(
                 mContext.getText(footerRes), linkInfo));
     }
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsKeyguardPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsKeyguardPreferenceController.java
index 8ee7ffd57c..1d0aa4d6c1 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsKeyguardPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsKeyguardPreferenceController.java
@@ -28,6 +28,8 @@ import com.android.settings.Utils;
 import com.android.settingslib.RestrictedLockUtils.EnforcedAdmin;
 import com.android.settingslib.RestrictedSwitchPreference;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 /**
  * Preference controller for Face settings page controlling the ability to unlock the phone
  * with face.
@@ -70,7 +72,7 @@ public class FaceSettingsKeyguardPreferenceController extends FaceSettingsPrefer
 
     @Override
     public int getAvailabilityStatus() {
-        return AVAILABLE;
+        return FaceUtils.isFaceUnlockSupported() ? UNSUPPORTED_ON_DEVICE : AVAILABLE;
     }
 
     @Override
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsLockscreenBypassPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsLockscreenBypassPreferenceController.java
index 0a2757b5cb..04b7a100a2 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsLockscreenBypassPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsLockscreenBypassPreferenceController.java
@@ -86,7 +86,11 @@ public class FaceSettingsLockscreenBypassPreferenceController
             return UNSUPPORTED_ON_DEVICE;
         }
 
-        if (mFaceManager != null && mFaceManager.isHardwareDetected()) {
+        boolean faceAuthOnlyOnSecurityView  = mContext.getResources().getBoolean(
+                com.android.internal.R.bool.config_faceAuthOnlyOnSecurityView);
+
+        if (mFaceManager != null && mFaceManager.isHardwareDetected() &&
+                !faceAuthOnlyOnSecurityView) {
             return mFaceManager.hasEnrolledTemplates(getUserId())
                     ? AVAILABLE : DISABLED_DEPENDENT_SETTING;
         } else {
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsManagePreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsManagePreferenceController.java
new file mode 100644
index 0000000000..ff482dc790
--- /dev/null
+++ b/src/com/android/settings/biometrics/face/FaceSettingsManagePreferenceController.java
@@ -0,0 +1,25 @@
+package com.android.settings.biometrics.face;
+
+import android.content.Context;
+
+import com.android.settings.core.BasePreferenceController;
+
+import com.android.settings.custom.biometrics.FaceUtils;
+
+public class FaceSettingsManagePreferenceController extends BasePreferenceController {
+
+    public static final String KEY = "security_settings_face_manage_category";
+
+    public FaceSettingsManagePreferenceController(Context context, String preferenceKey) {
+        super(context, preferenceKey);
+    }
+
+    public FaceSettingsManagePreferenceController(Context context) {
+        this(context, KEY);
+    }
+
+    @Override
+    public int getAvailabilityStatus() {
+        return FaceUtils.isFaceUnlockSupported() ? UNSUPPORTED_ON_DEVICE : AVAILABLE;
+    }
+}
\ No newline at end of file
diff --git a/src/com/android/settings/biometrics/face/FaceSettingsRemoveButtonPreferenceController.java b/src/com/android/settings/biometrics/face/FaceSettingsRemoveButtonPreferenceController.java
index 6c9806043d..1d1b55796d 100644
--- a/src/com/android/settings/biometrics/face/FaceSettingsRemoveButtonPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceSettingsRemoveButtonPreferenceController.java
@@ -25,8 +25,6 @@ import android.hardware.face.Face;
 import android.hardware.face.FaceManager;
 import android.os.Bundle;
 import android.util.Log;
-import android.view.View;
-import android.widget.Button;
 import android.widget.Toast;
 
 import androidx.preference.Preference;
@@ -41,12 +39,14 @@ import com.android.settingslib.widget.LayoutPreference;
 
 import java.util.List;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 /**
  * Controller for the remove button. This assumes that there is only a single face enrolled. The UI
  * will likely change if multiple enrollments are allowed/supported.
  */
-public class FaceSettingsRemoveButtonPreferenceController extends BasePreferenceController
-        implements View.OnClickListener {
+public class FaceSettingsRemoveButtonPreferenceController extends BasePreferenceController implements
+        Preference.OnPreferenceClickListener {
 
     private static final String TAG = "FaceSettings/Remove";
     static final String KEY = "security_settings_face_delete_faces_container";
@@ -64,8 +64,13 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
         public Dialog onCreateDialog(Bundle savedInstanceState) {
             AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
 
+            int dialogMessage = R.string.security_settings_face_settings_remove_dialog_details;
+            if (FaceUtils.isFaceUnlockSupported()) {
+                dialogMessage = R.string.security_settings_face_settings_remove_dialog_details_custom;
+            }
+
             builder.setTitle(R.string.security_settings_face_settings_remove_dialog_title)
-                    .setMessage(R.string.security_settings_face_settings_remove_dialog_details)
+                    .setMessage(dialogMessage)
                     .setPositiveButton(R.string.delete, mOnClickListener)
                     .setNegativeButton(R.string.cancel, mOnClickListener);
             AlertDialog dialog = builder.create();
@@ -83,7 +88,6 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
     }
 
     private Preference mPreference;
-    private Button mButton;
     private Listener mListener;
     private SettingsActivity mActivity;
     private int mUserId;
@@ -106,7 +110,7 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
             if (remaining == 0) {
                 final List<Face> faces = mFaceManager.getEnrolledFaces(mUserId);
                 if (!faces.isEmpty()) {
-                    mButton.setEnabled(true);
+                    mPreference.setEnabled(true);
                 } else {
                     mRemoving = false;
                     mListener.onRemoved();
@@ -122,7 +126,7 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
         @Override
         public void onClick(DialogInterface dialog, int which) {
             if (which == DialogInterface.BUTTON_POSITIVE) {
-                mButton.setEnabled(false);
+                mPreference.setEnabled(false);
                 final List<Face> faces = mFaceManager.getEnrolledFaces(mUserId);
                 if (faces.isEmpty()) {
                     Log.e(TAG, "No faces");
@@ -135,7 +139,7 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
                 // Remove the first/only face
                 mFaceManager.remove(faces.get(0), mUserId, mRemovalCallback);
             } else {
-                mButton.setEnabled(true);
+                mPreference.setEnabled(true);
                 mRemoving = false;
             }
         }
@@ -159,16 +163,12 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
     @Override
     public void updateState(Preference preference) {
         super.updateState(preference);
-
         mPreference = preference;
-        mButton = ((LayoutPreference) preference)
-                .findViewById(R.id.security_settings_face_settings_remove_button);
-        mButton.setOnClickListener(this);
-
+        preference.setOnPreferenceClickListener(this);
         if (!FaceSettings.isFaceHardwareDetected(mContext)) {
-            mButton.setEnabled(false);
+            preference.setEnabled(false);
         } else {
-            mButton.setEnabled(!mRemoving);
+            preference.setEnabled(!mRemoving);
         }
     }
 
@@ -183,14 +183,12 @@ public class FaceSettingsRemoveButtonPreferenceController extends BasePreference
     }
 
     @Override
-    public void onClick(View v) {
-        if (v == mButton) {
-            mMetricsFeatureProvider.logClickedPreference(mPreference, getMetricsCategory());
-            mRemoving = true;
-            ConfirmRemoveDialog dialog = new ConfirmRemoveDialog();
-            dialog.setOnClickListener(mOnClickListener);
-            dialog.show(mActivity.getSupportFragmentManager(), ConfirmRemoveDialog.class.getName());
-        }
+    public boolean onPreferenceClick(Preference preference) {
+        mRemoving = true;
+        ConfirmRemoveDialog dialog = new ConfirmRemoveDialog();
+        dialog.setOnClickListener(mOnClickListener);
+        dialog.show(mActivity.getSupportFragmentManager(), ConfirmRemoveDialog.class.getName());
+        return true;
     }
 
     public void setListener(Listener listener) {
diff --git a/src/com/android/settings/biometrics/face/FaceStatusPreferenceController.java b/src/com/android/settings/biometrics/face/FaceStatusPreferenceController.java
index 648da9b6ef..a8e00a56b3 100644
--- a/src/com/android/settings/biometrics/face/FaceStatusPreferenceController.java
+++ b/src/com/android/settings/biometrics/face/FaceStatusPreferenceController.java
@@ -18,12 +18,15 @@ package com.android.settings.biometrics.face;
 
 import android.content.Context;
 import android.hardware.face.FaceManager;
+import androidx.preference.Preference;
 
 import com.android.settings.R;
 import com.android.settings.Settings;
 import com.android.settings.Utils;
 import com.android.settings.biometrics.BiometricStatusPreferenceController;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 public class FaceStatusPreferenceController extends BiometricStatusPreferenceController {
 
     public static final String KEY_FACE_SETTINGS = "face_settings";
@@ -51,12 +54,18 @@ public class FaceStatusPreferenceController extends BiometricStatusPreferenceCon
 
     @Override
     protected String getSummaryTextEnrolled() {
+        if (FaceUtils.isFaceUnlockSupported() && FaceUtils.isFaceDisabledByAdmin(mContext)) {
+            return mContext.getResources().getString(R.string.disabled_by_administrator_summary);
+        }
         return mContext.getResources()
                 .getString(R.string.security_settings_face_preference_summary);
     }
 
     @Override
     protected String getSummaryTextNoneEnrolled() {
+        if (FaceUtils.isFaceUnlockSupported() && FaceUtils.isFaceDisabledByAdmin(mContext)) {
+            return mContext.getResources().getString(R.string.disabled_by_administrator_summary);
+        }
         return mContext.getResources()
                 .getString(R.string.security_settings_face_preference_summary_none);
     }
@@ -71,4 +80,12 @@ public class FaceStatusPreferenceController extends BiometricStatusPreferenceCon
         return FaceEnrollIntroduction.class.getName();
     }
 
+    @Override
+    public void updateState(Preference preference) {
+        if (FaceUtils.isFaceUnlockSupported()) {
+            preference.setEnabled(!FaceUtils.isFaceDisabledByAdmin(mContext));
+        }
+        super.updateState(preference);
+    }
+
 }
diff --git a/src/com/android/settings/custom/biometrics/FaceUtils.java b/src/com/android/settings/custom/biometrics/FaceUtils.java
new file mode 100644
index 0000000000..b83aec83a9
--- /dev/null
+++ b/src/com/android/settings/custom/biometrics/FaceUtils.java
@@ -0,0 +1,31 @@
+package com.android.settings.custom.biometrics;
+
+import android.app.admin.DevicePolicyManager;
+import android.content.Context;
+import android.os.SystemProperties;
+import android.util.Log;
+
+import com.android.internal.util.custom.faceunlock.FaceUnlockUtils;
+
+public final class FaceUtils {
+    private static final String TAG = "FaceUtils";
+
+    public static boolean isFaceUnlockSupported() {
+        return FaceUnlockUtils.isFaceUnlockSupported();
+    }
+
+    public static boolean isFaceDisabledByAdmin(Context context) {
+        DevicePolicyManager devicePolicyManager = (DevicePolicyManager) context.getSystemService("device_policy");
+        try {
+            if (devicePolicyManager.getPasswordQuality(null) > 32768) {
+                return true;
+            }
+        } catch (SecurityException e) {
+            Log.e(TAG, "isFaceDisabledByAdmin error:", e);
+        }
+        if ((devicePolicyManager.getKeyguardDisabledFeatures(null) & 128) != 0) {
+            return true;
+        }
+        return false;
+    }
+}
diff --git a/src/com/android/settings/custom/biometrics/face/FaceEnrollActivity.java b/src/com/android/settings/custom/biometrics/face/FaceEnrollActivity.java
new file mode 100644
index 0000000000..3e5c1e9fb8
--- /dev/null
+++ b/src/com/android/settings/custom/biometrics/face/FaceEnrollActivity.java
@@ -0,0 +1,29 @@
+package com.android.settings.custom.biometrics.face;
+
+import android.app.Activity;
+import android.content.Intent;
+import android.os.Bundle;
+import com.android.settings.biometrics.face.FaceEnrollIntroduction;
+import com.android.settings.custom.biometrics.FaceUtils;
+
+public class FaceEnrollActivity extends Activity {
+    @Override
+    public void onCreate(Bundle bundle) {
+        super.onCreate(bundle);
+        if (FaceUtils.isFaceUnlockSupported()) {
+            Intent faceIntroIntent = getFaceIntroIntent();
+            faceIntroIntent.putExtra("for_redo", getIntent().getBooleanExtra("for_redo", false));
+            if (getCallingActivity() != null) {
+                faceIntroIntent.setFlags(33554432);
+            }
+            startActivity(faceIntroIntent);
+        }
+        finish();
+    }
+
+    private Intent getFaceIntroIntent() {
+        Intent intent = new Intent(this, FaceEnrollIntroduction.class);
+        intent.addFlags(268468224);
+        return intent;
+    }
+}
diff --git a/src/com/android/settings/custom/biometrics/face/FaceSettingsRedoPreferenceController.java b/src/com/android/settings/custom/biometrics/face/FaceSettingsRedoPreferenceController.java
new file mode 100644
index 0000000000..958912b009
--- /dev/null
+++ b/src/com/android/settings/custom/biometrics/face/FaceSettingsRedoPreferenceController.java
@@ -0,0 +1,132 @@
+package com.android.settings.custom.biometrics.face;
+
+import android.app.AlertDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.hardware.face.Face;
+import android.hardware.face.FaceManager;
+import android.util.Log;
+import android.widget.Toast;
+import androidx.preference.Preference;
+import com.android.settings.R;
+import com.android.settings.SettingsActivity;
+import com.android.settings.core.BasePreferenceController;
+import com.android.settings.slices.SliceBackgroundWorker;
+import com.android.settings.biometrics.face.FaceSettings;
+import com.android.settings.custom.biometrics.FaceUtils;
+import java.util.List;
+
+public class FaceSettingsRedoPreferenceController extends BasePreferenceController implements
+        Preference.OnPreferenceClickListener {
+    static final String KEY = "security_settings_face_redo_face_scan";
+    private static final String TAG = "FaceSettings/Redo";
+    private SettingsActivity mActivity;
+    private final Context mContext;
+    private final FaceManager mFaceManager;
+    private final FaceManager.RemovalCallback mRemovalCallback;
+    private int mUserId;
+
+    @Override 
+    public String getPreferenceKey() {
+        return KEY;
+    }
+
+    public FaceSettingsRedoPreferenceController(Context context, String str) {
+        super(context, str);
+        mRemovalCallback = new FaceManager.RemovalCallback() {
+            @Override
+            public void onRemovalError(Face face, int i, CharSequence charSequence) {
+                Log.e(FaceSettingsRedoPreferenceController.TAG, "Unable to remove face: " + face.getBiometricId() + " error: " + i + " " + ((Object) charSequence));
+                Toast.makeText(mContext, charSequence, 0).show();
+            }
+
+            @Override
+            public void onRemovalSucceeded(Face face, int i) {
+                if (i == 0) {
+                    Log.v(FaceSettingsRedoPreferenceController.TAG, "onRemovalSucceeded ");
+                    Intent intent = new Intent("com.android.settings.intent.action.FACE_ENROLL");
+                    intent.putExtra("for_face", true);
+                    intent.putExtra("for_redo", true);
+                    intent.addFlags(268435456);
+                    mContext.startActivity(intent);
+                    return;
+                }
+                Log.v(FaceSettingsRedoPreferenceController.TAG, "Remaining: " + i);
+            }
+        };
+        mContext = context;
+        mFaceManager = (FaceManager) context.getSystemService(FaceManager.class);
+    }
+
+    public FaceSettingsRedoPreferenceController(Context context) {
+        this(context, KEY);
+    }
+
+    public void setUserId(int i) {
+        mUserId = i;
+    }
+
+    @Override
+    public void updateState(Preference preference) {
+        super.updateState(preference);
+        if (!FaceSettings.isFaceHardwareDetected(mContext) ||
+              !mFaceManager.hasEnrolledTemplates(mUserId)) {
+            preference.setEnabled(false);
+        } else {
+            preference.setEnabled(true);
+            preference.setOnPreferenceClickListener(this);
+        }
+    }
+
+    @Override
+    public int getAvailabilityStatus() {
+        return FaceUtils.isFaceUnlockSupported() ? AVAILABLE : UNSUPPORTED_ON_DEVICE;
+    }
+
+    @Override
+    public boolean onPreferenceClick(Preference preference) {
+        showFaceRedoWarningDialog();
+        return true;
+    }
+
+    public void setActivity(SettingsActivity settingsActivity) {
+        mActivity = settingsActivity;
+    }
+
+    private void deleteFace() {
+        List enrolledFaces = mFaceManager.getEnrolledFaces(mUserId);
+        if (enrolledFaces.isEmpty()) {
+            Log.e(TAG, "No faces");
+            return;
+        }
+        if (enrolledFaces.size() > 1) {
+            Log.e(TAG, "Multiple enrollments: " + enrolledFaces.size());
+        }
+        mFaceManager.remove((Face) enrolledFaces.get(0), mUserId, mRemovalCallback);
+    }
+
+    void showFaceRedoWarningDialog() {
+        AlertDialog.Builder builder = new AlertDialog.Builder(mActivity);
+        builder.setTitle(R.string.security_settings_face_unlock_redo_face_scan_title)
+            .setMessage(R.string.face_redo_warning_msg)
+            .setPositiveButton(R.string.face_redo_confirm_btn, new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialogInterface, int i) {
+                    deleteFace();
+                }
+            })
+            .setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {
+                @Override
+                public void onClick(DialogInterface dialogInterface, int i) {
+                }
+            })
+            .setOnCancelListener(new DialogInterface.OnCancelListener() {
+                @Override
+                public void onCancel(DialogInterface dialogInterface) {
+                }
+            });
+        builder.create().show();
+    }
+}
diff --git a/src/com/android/settings/homepage/contextualcards/FaceReEnrollDialog.java b/src/com/android/settings/homepage/contextualcards/FaceReEnrollDialog.java
index 46ba26d82d..189b6c0c06 100644
--- a/src/com/android/settings/homepage/contextualcards/FaceReEnrollDialog.java
+++ b/src/com/android/settings/homepage/contextualcards/FaceReEnrollDialog.java
@@ -32,6 +32,8 @@ import com.android.settings.R;
 import com.android.settings.Utils;
 import com.android.settings.homepage.contextualcards.slices.FaceSetupSlice;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 /**
  * This class is used to show a popup dialog for {@link FaceSetupSlice}.
  */
@@ -41,6 +43,7 @@ public class FaceReEnrollDialog extends AlertActivity implements
     private static final String TAG = "FaceReEnrollDialog";
 
     private static final String BIOMETRIC_ENROLL_ACTION = "android.settings.BIOMETRIC_ENROLL";
+    private static final String BIOMETRIC_ENROLL_ACTION_CUSTOM = "com.android.settings.intent.action.FACE_ENROLL";
 
     private FaceManager mFaceManager;
     /**
@@ -106,7 +109,9 @@ public class FaceReEnrollDialog extends AlertActivity implements
                     return;
                 }
                 // Send user to the enroll flow.
-                final Intent reEnroll = new Intent(BIOMETRIC_ENROLL_ACTION);
+                final Intent reEnroll = new Intent(
+                    FaceUtils.isFaceUnlockSupported() ?
+                    BIOMETRIC_ENROLL_ACTION_CUSTOM : BIOMETRIC_ENROLL_ACTION);
                 final Context context = getApplicationContext();
 
                 try {
diff --git a/src/com/android/settings/security/TopLevelSecurityEntryPreferenceController.java b/src/com/android/settings/security/TopLevelSecurityEntryPreferenceController.java
index 4a4d34511d..e0326ff137 100644
--- a/src/com/android/settings/security/TopLevelSecurityEntryPreferenceController.java
+++ b/src/com/android/settings/security/TopLevelSecurityEntryPreferenceController.java
@@ -24,6 +24,8 @@ import com.android.settings.R;
 import com.android.settings.Utils;
 import com.android.settings.core.BasePreferenceController;
 
+import com.android.settings.custom.biometrics.FaceUtils;
+
 public class TopLevelSecurityEntryPreferenceController extends BasePreferenceController {
 
     public TopLevelSecurityEntryPreferenceController(Context context, String preferenceKey) {
@@ -41,10 +43,12 @@ public class TopLevelSecurityEntryPreferenceController extends BasePreferenceCon
                 Utils.getFingerprintManagerOrNull(mContext);
         final FaceManager faceManager =
                 Utils.getFaceManagerOrNull(mContext);
-        if (faceManager != null && faceManager.isHardwareDetected()) {
-            return mContext.getText(R.string.security_dashboard_summary_face);
+        if (fpm != null && fpm.isHardwareDetected() && FaceUtils.isFaceUnlockSupported()) {
+            return mContext.getText(R.string.security_dashboard_summary_face_and_fingerprint);
         } else if (fpm != null && fpm.isHardwareDetected()) {
             return mContext.getText(R.string.security_dashboard_summary);
+        } else if (faceManager != null && faceManager.isHardwareDetected()) {
+            return mContext.getText(R.string.security_dashboard_summary_face);
         } else {
             return mContext.getText(R.string.security_dashboard_summary_no_fingerprint);
         }
-- 
2.31.1.606.gdf6c4f722c

