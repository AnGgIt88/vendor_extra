From c97b16d7392bb90cc41b5c967aa17b9b2d78f880 Mon Sep 17 00:00:00 2001
From: Danny Lin <danny@kdrag0n.dev>
Date: Mon, 12 Apr 2021 22:10:18 -0700
Subject: [PATCH 10/14] blur: Downscale image before blurring
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Unintuitively, combining the initial blur pass with downscaling makes
the rendering process slower because sampling from the high-resolution
image with bilinear sampling uses more memory bandwidth. It also
increases the total amount of ALU work because it effectively introduces
an unnecessary blur pass.

By downscaling the image with glBlitFramebuffer before running blur
passes, we can save a blur pass and render a more correct result. When
tested with 2 layers of another 6-pass blur implementation, this saves
~800 Âµs of rendering time on an Adreno 640 GPU at 1440x3040 resolution.

Change-Id: Ie897a52f1628e40d34c3c31f5f779020594bb091
---
 libs/renderengine/gl/filters/BlurFilter.cpp | 27 +++++++++++----------
 1 file changed, 14 insertions(+), 13 deletions(-)

diff --git a/libs/renderengine/gl/filters/BlurFilter.cpp b/libs/renderengine/gl/filters/BlurFilter.cpp
index 0ff1f3df1..ff1b93ea2 100644
--- a/libs/renderengine/gl/filters/BlurFilter.cpp
+++ b/libs/renderengine/gl/filters/BlurFilter.cpp
@@ -177,18 +177,21 @@ status_t BlurFilter::prepare() {
     const float stepX = radiusByPasses / (float)mCompositionFbo.getBufferWidth();
     const float stepY = radiusByPasses / (float)mCompositionFbo.getBufferHeight();
 
-    // Let's start by downsampling and blurring the composited frame simultaneously.
-    mBlurProgram.useProgram();
-    glActiveTexture(GL_TEXTURE0);
-    glBindTexture(GL_TEXTURE_2D, mCompositionFbo.getTextureName());
-    glUniform2f(mBOffsetLoc, stepX, stepY);
-    glViewport(0, 0, mPingFbo.getBufferWidth(), mPingFbo.getBufferHeight());
-    mPingFbo.bind();
-    drawMesh(mBUvLoc, mBPosLoc);
+    // This initial downscaling blit makes the first pass correct and improves performance.
+    GLFramebuffer* read = &mCompositionFbo;
+    GLFramebuffer* draw = &mPingFbo;
+    read->bindAsReadBuffer();
+    draw->bindAsDrawBuffer();
+    glBlitFramebuffer(0, 0,
+                      read->getBufferWidth(), read->getBufferHeight(),
+                      0, 0,
+                      draw->getBufferWidth(), draw->getBufferHeight(),
+                      GL_COLOR_BUFFER_BIT, GL_LINEAR);
+    read = &mPingFbo;
+    draw = &mPongFbo;
 
     // And now we'll ping pong between our textures, to accumulate the result of various offsets.
-    GLFramebuffer* read = &mPingFbo;
-    GLFramebuffer* draw = &mPongFbo;
+    mBlurProgram.useProgram();
     glViewport(0, 0, draw->getBufferWidth(), draw->getBufferHeight());
     for (auto i = 1; i < passes; i++) {
         ATRACE_NAME("BlurFilter::renderPass");
@@ -200,9 +203,7 @@ status_t BlurFilter::prepare() {
         drawMesh(mBUvLoc, mBPosLoc);
 
         // Swap buffers for next iteration
-        auto tmp = draw;
-        draw = read;
-        read = tmp;
+        std::swap(read, draw);
     }
     mLastDrawTarget = read;
 
-- 
2.31.1.606.gdf6c4f722c

